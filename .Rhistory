library(caret);library(kernlab);data(spam)
inTrain=createDataPartition(y=spam$type,p=0.40,list=FALSE)
View(inTrain)
training=spam[inTrain]
training=spam[inTrain,]
View(training)
M=cor(training)
M=cor(training[,-58])
M
View(M)
View(spam)
install.packages(psych)
"psych"
install.packages("psych)
asdf
asdf
""
install.packages("psych")
library(psych)
?ICQ
?ICC
?rpart
?modelfit
library(caret)
?modelfit
?train
testing=spam[-inTrain,]
modfit=train(training$type ~ ., method="rpart",data=training)
install.packages("e1071")
library(caret)
modfit=train(training$type ~ ., method="rpart",data=training)
setwd("C:/Users/Sean/Dropbox/Becca.Sean share")
source(file="DailyData.R")
View(days)
source(file="DailyData.R")
View(days)
View(dat)
for(x in seq(nrow(days)))    #Starting with looping over the active days
{       #Now loop over the workouts for that day
daily.workout=split(split(dat, f = dat$Date)[[x]],split(dat, f = dat$Date)[[x]]$Exercise)
for(y in seq(length(daily.workout)))
{
names.workout=unique(daily.workout[[y]]$Exercise) #Get the name of the y-th workout for the x-th day
category=unique(daily.workout[[y]]$Category)      #Get the category of the workout
weight=sqrt(sum(daily.workout[[y]]$Weight..lbs.^2))                                      #Sqrt of sum of squares of weight
reps=sqrt(sum(daily.workout[[y]]$Rep^2))                                                 #Sqrt of sum of squares of reps
theta= acos(daily.workout[[y]]$Weight..lbs. * daily.workout[[y]]$Reps / (weight * reps)) #Angle between reps and weight
distance=sqrt(sum(daily.workout[[y]]$Distance^2))                                        #Sqrt of sum of squares of distance
time=sqrt(sum(as.numeric(daily.workout[[y]]$Time)^2))                                    #Sqrt of sum of squares of time
days[x, colnames(days)==paste(names.workout,"Weight", sep = " ")]=weight
days[x, colnames(days)==paste(names.workout,"Reps", sep = " ")]=reps
days[x, colnames(days)==paste(names.workout,"Distance", sep = " ")]=distance
days[x, colnames(days)==paste(names.workout,"Time", sep = " ")]=time
}
}
View(days)
dat[is.na(dat)]=0
View(dat)
source(file="DailyData.R")
View(days)
is.na(days)
days[is.na(days)]
dat[is.na(dat)]
typeof(dat$Date)
typeof(dat$Weight..lbs.)
typeof(dat$Reps)
typeof(dat$Time)
typeof(dat$Distance)
source(file="DailyData.R")
View(days)
days[is.na(days)]
source(file="DailyData.R")
View(days)
acos(daily.workout[[1]]$Weight..lbs. * daily.workout[[1]]$Reps / (weight * reps))
daily.workout
acos(daily.workout[[1]]$Weight..lbs. * daily.workout[[1]]$Reps / (weight * reps))
daily.workout[[1]]
acos(daily.workout[[1]]$Weight..lbs. * daily.workout[[1]]$Reps
)
source(file="DailyData.R")
source(file="DailyData.R")
View(days)
?colSums
colSums(days[,-1])
days[,is.na(colSums(days[,-1])) | colSums(days[,-1])==0]
days[,is.na(colSums(days[,-1])) | colSums(days[,-1])==0]=NULL
View(days)
days[,is.na(colSums(days[,-1])) | colSums(days[,-1])==0]
?filter
library(dplyr)
?filter
days[,!(is.na(colSums(days[,-1])) | colSums(days[,-1])==0)]
days[,(is.na(colSums(days[,-1])) | colSums(days[,-1])==0)]
colSums(days)
days[days!=0]
source(file="DailyData.R")
View(days)
days[days!=0]
days[colSums(days)!=0]
days[,colSums(days)!=0]
days[,colSums(days[,-1])!=0]
View(days)
days[days>=0]
days[days>0]
days[,colSums(days[,-1])!=0]
days[colSums(days)>0]
days[colSums(days[-1])>0]
days[colSums(days[,-1])>0]
days[colSums(days!=0)>0]
ncol(days)
length(colSums(days[,-1]))
length(days[,colSums(days[,-1])])
length(days[,colSums(days[,-1])>0])
days[,-1]=days[,colSums(days[,-1])>0]
View(days)
dim(days)
source(file="DailyData.R")
View(days)
?drop
days[colSums(days)>0]
days[,(-1,colSums(days)>0)]
?subset
subset(days[,-1],colSums(days[,-1])>0)
dim(subset(days[,-1],colSums(days[,-1])>0))
colSums(days[,-1])
dim(colSums(days[,-1]))
length(colSums(days[,-1]))
dim(subset(days[,-1],colSums(days[,-1])>0))
dim(subset(days,colSums(days[,-1])>0))
dim(days[,colSums(days[,-1])>0])
days[,colSums(days != 0) > 0]
dim(days[,colSums(days != 0) > 0])
nrow(days)
days[,colSums(days != 0) > 0][,1]
days=days[,colSums(days != 0) > 0]
View(days)
source(file="DailyData.R")
View(days)
dim(days)
source(file="DailyData.R")
View(days)
source(file="DailyData.R")
source(file="DailyData.R")
View(days)
?make.names
test=matrix(ncol=3,nrow=2)
test
test=matrix(ncol=3)
test
sum(test)
sum(test * test)
sqrt(sum(test * test))
sum(test * test)/sum(test)
setwd("C:/Users/Sean/Desktop/GitHub/WorkoutAnalysis")
source(file="DailyDataBS.R")
source(file="DailyDataBS.R")
source(file="DailyDataBS.R")
View(days)
injury=read.csv(file="MedHelper/schedulelog_2016-09-22.csv",stringsAsFactors = F)
View(injury)
